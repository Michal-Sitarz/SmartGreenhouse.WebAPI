// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGreenhouse.WebAPI.Data;

namespace SmartGreenhouse.WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210707210957_AddSensorNodesAndReadingsModels")]
    partial class AddSensorNodesAndReadingsModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartGreenhouse.WebAPI.Models.ConditionsReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AirHumidity")
                        .HasColumnType("int");

                    b.Property<int>("AirTemperature")
                        .HasColumnType("int");

                    b.Property<int>("LightIntensity")
                        .HasColumnType("int");

                    b.Property<string>("SensorNodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SoilMoisture")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SensorNodeId");

                    b.ToTable("ConditionsReadings");
                });

            modelBuilder.Entity("SmartGreenhouse.WebAPI.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentHeight")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateHarvested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePlanted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variety")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("SmartGreenhouse.WebAPI.Models.SensorNode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SensorNodes");
                });

            modelBuilder.Entity("SmartGreenhouse.WebAPI.Models.ConditionsReading", b =>
                {
                    b.HasOne("SmartGreenhouse.WebAPI.Models.SensorNode", "SensorNode")
                        .WithMany("Readings")
                        .HasForeignKey("SensorNodeId");

                    b.Navigation("SensorNode");
                });

            modelBuilder.Entity("SmartGreenhouse.WebAPI.Models.SensorNode", b =>
                {
                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
